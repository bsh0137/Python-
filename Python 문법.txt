Python은 첫 시작이 0
keras 나 tensorflow import 오류나면 아나콘다프롬프트 - conda install tensorflow 
//: 몫구함
%:나머지
싱글쿼터('), 더블쿼터(")을 문자열에 넣으려면 \을 앞에 추가해야한다
문자열 앞에 r로 감싸주면  raw라는 뜻으로 아무 의미 없는 문자열이라는 뜻
np.argmax(): 최대값의 인덱스 구함
np.argmin(): 최소값의 인덱스 구함
unique(x) : 배열 내 중복된 원소 제거 후 유일한 원소를 정렬하여 반환
A<B : 집합 A가 집합 B의 부분집합인가? 묻는 문장
StandardScaler(): nomalization, 평균0 표편 1에 가깝게 만듦
replace(old, new, [count]) -> replace("찾을값", "바꿀값", [바꿀횟수])
plt.subplots(2, 1, figsize = (10,7)):figsize 10x7인 그래프를 2행 1열형태로 만듦
tolist():배열을 목록으로 변환
with문: 주로 파일을 처리할 때 사용. with 블록을 벗어나면 파일이 자동으로 닫힘
filter(regex=""): ""글자가 포함된 것을 필터링하는 함수인 것 같다.
dropna(): 결측치 있는 행 제거
drop_duplicate(): 중복된 행 제거
##########################################################################################
train데이터 test데이터 나누는 함수 라이브러리
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state=3)
===> x_train, x_test, y_train, y_test 순서 지켜야하는 것 같다.
##########################################################################################
2:5 : 2,3,4 3:8 => 3,4,5,6,7
from sklearn.model_selection import cross_val_score: 크로스 밸리데이션(교차검증)가능케하는 라이브러리
from sklearn.model_selection import train_test_split: train, test 셋 나눠주는 함수 import 함
plt.title("제목"): 그래프 제목 설정하는 함수
sm.mean_absolute_error(y_test, y_test_pred): 오차 계산(절대값)해줌(sm = sklearn.metrics)
polynomial = PolynomialFeatures(degree=10): 10차 다항식으로 바꿈 (ex: X =>1, X, X^2, X^3 ...) 
##########################################################################################
# 출력 값을 그래프로 그리기
plt.scatter(x_test, y_test, color='green')
plt.plot(x_test,y_test_pred, color='black',linewidth =4)
plt.xticks(())
plt.yticks(())
plt.show()
##########################################################################################
.append(): 리스트맨뒤에 값 추가
eval("3+5"): 8출력, 문자열로 된 수식을 계산
plt.scatter():산점도
pickle.dump()/pickle/load(): 텍스트 파일이 아닌 경우 open 함수로 파일을 못 불러오는데 리스트나 배열자료 같이 텍스트파일이 아닌 파일을 불러오거나 저장할 때 사용 
regressor = linear_model.LinearRegression(): 선형 회귀 분석 모델 오브젝트 생성하기
round(x,2): x를 소수 둘째 자리까지 표기
np.loadtxt("파일이름.txt', delimiter =',' ) : txt 파일을 구분자 ,로 하여 불러옴
head():데이터 짧게 보여줌
preprocessing.Binarizer(threshold=2.1).transform(input_data): input 데이터를 임계값 2.1을 기준으로 이진화 변환함 ( from sklearn import preprocessing)
data.mean(axis=0)/data.std(axis=0) : 행을 기준으로 데이터의 평균/표준편차 알려줌
preprocessing.scale(data): data를 스케일링해줌( 평균0, 표준편차 1에 가깝게)
data_normalized_l1 = preprocessing.normalize(data, norm='l1') : 정규화 함수
datasets.load_boston(): 보스턴 집값 샘플자료
shuffle(data.data, data.target, random_state = 7): 데이터 섞어줌
####################################################################################################################
#매핑 관계 출력
print("\nLabel mapping:")
for i, item in enumerate(encoder.classes_):
    print(item, '-->', i)
# 레이블 인코딩
test_labels = ['green', 'red', 'black']
encoded_values = encoder.transform(test_labels)
print('\nLabels =', test_labels)
print("Encoded values =", list(encoded_values))
print(encoded_values)
type(encoded_values)
#숫자 값 디코딩
encoded_values = [3, 0, 4, 1]
decoded_list = encoder.inverse_transform(encoded_values)
print('\nEncoded values =', encoded_values)
print("Decoded labels =", list(decoded_list))
###############################################레이블 인코딩#####################################################################
#레이블 인코딩
import numpy as np
from sklearn import preprocessing
#샘플 입력 레이블
input_labels = ['red','black', 'red', 'green', 'black', 'yellow', 'white']
#레이블 인코더 생성후 앞에서 정의한 레이블로 학습시키기
encoder = preprocessing.LabelEncoder()
encoder.fit(input_labels)
####################################################################################################################
data_scaler_minmax = preprocessing.MinMaxScaler(feature_range=(0,1))
data_scaled_minmax = data_scaler_minmax.fit_transform(input_data)
print("\nMin max scaled data:\n", data_scaled_minmax)
각 행마다 최소값을 0, 최대값을 1로 나머지는 상대적인 값으로 나타낸 것
###############################################################turtle 라이브러리 사용법)################################
t.pensize(x): 펜 크기 x로 변경
t.color("색깔"):  특정색깔로 바꿈
t.setheading(x)/t.seth: 거북이가 x도 방향보게함 (0도가 오른쪽,90도가 위쪽)
t.home():거북이의 위치와 방향을 처음 상태로 돌림
t.setup(width=,height=): Turtle Graphic 창의 크기 설정	
t.onkeypress(함수,"키이름"):키보드를 눌렀을 때 실행할 함수를 정함
t.onscreenclick(함수): 마우스 버튼을 눌렀을 때 실행할 함수를 정함
t.ontimer(함수,시간):일정한 시간이 지난 뒤 실행할 함수를 정함
t.listen():사용자 입력이 잘 처리되도록 거북이 그래픽 창에 포커스를 줌
t.title("창 이름"): 거북이 그래픽 창의 이름을 지정
t.write("문자열"):현재 거북이 위치에 문자 출력
t.penup()/t.up():꼬리를 듦( 움직여도 선이 안그려짐)
t.pendown(): 꼬리를 내림(이제 그릴 수 있음)
t.speed():속도조절
t.fillcolor("색이름"): 도형 내부 칠하는 색 바꿈
t.bgcolor("색 이름"): 화면 배경색 바꿈
t.hideturtle() or t.ht:거북이 화면에서 가림
t.showturtle(): 거북이 나타남
t.position()/t.pos : 거북이 현재 좌표	
t.xcor()/t.ycor(): 거북이 X 혹은 Y 좌표만 구함 
t.goto(x,y)/t.setpos(x,y): 거북이를 특정좌표로 보냄
t.setx(x)/t.sety(y): 거북이의 x나 y좌표 하나만 지정한 위치로 이동
t.distance(x,y): 현재 거북이가 있는 위치에서 특정 위치까지의 거리를 구함
t.heading(): 거북이가 현재 바라보는 각도 구함
t.towards(): 현재 거북이가 있는 위치에서 특정 위치까지 바라보는 각도 구함
t.reset(): 화면지우고 거북이도 원래 자리와 상태로 되돌림
t.begin_fill():도형내부를 칠할 준비함
t.end_fill(): 도형 내부 색칠함
while True: 영원히 반복
t.clear():화면에 있는 이름이나 글자 제거
t.setheading(10):거북이가 방향을 a각도 돌림
####################################################################################################################
random.choice():리스트에 있는 자료들 중 하나 임의로 선택하는 함수
X.to_csv("이름.csv"):X를 "이름"csv파일로 저장
plt.plot(): 그래프
plt.scatter(): 산점도
plt.show():그래프를 보여주는 함수
format(x, ".2f"):x를 소수점 둘째 자리까지만 출력
pd.read_csv("파일.csv"): csv 읽어오기
pd.read_csv("파일이름.csv",index_col = 0): csv 파일을 불러오고 첫번째 컬럼을 인덱스열로 봄
sqeueeze(): 크기가 1인 차원 없앰
len():길이 반환
turtle.forward(x): 거북이 라이브러리로 x 만큼 앞으로 이동
np.random.seed():씨드값 랜덤 실행같게 하기
pd.read_csv("데이터이름.csv") = csv 파일 읽기
array1.copy(): array1 복사 이경우 복사
cv2.resize(image, dsize, fx, fy, interpolation): 이미지 크기 조절, dsize: manual size, fx :가로비율 fy: 세로비율, interpolation:보간법(INTER_CUBIC: 이미지 크게할 때 보통사용, INTER_AREA 이미지 작게할 때 보통 사용)
cv2.mwrite(file_name,image): image파일을 file_name으로 저장
cv2.waitKey(time): 키보드 입력을 처리하는(받는) 함수
cv2.destroyAllWindows()
cv2.imread('file_name',cv2.IMREAD_COLOR): image 컬러로 읽기
cv2.imshow():이미지 화면에 보여주는 함수
cv2.waitKey(0):실행된 이미지를 사라지지 않게함
cv2.cvtColor(image,cv2.COLOR_BGR2GRAY): BGR 형태의 image를 gray형태로 바꾸는 함수 
np.linspace(0,10,5): 0~9를 5개로 나누어  생성
np.random.rand(3,4) : 3X4 난수생성
np.random.randint(0,10,(3,3)):0~9까지 수 랜덤으로 뽑아 3X3 행렬만들기
np.concatenate([array1,array2]): array1, array2 를 붙여 합쳐줌(가로축으로 ex: [1,2] +[3,4] = [1,2,3,4]
np.concatenate([array1,array2], axis=0): array1, array2를 세로축으로 붙여 합쳐줌
left, right = np.split(array, [2], axis=1) : array를 [2]열을 기준으로 나누어 left, right에 할당
array1.reshape((2,2)): array1을 2X2형태로 바꿈
np.random.normal(0,1,(3,3)) : 평균 0, 표준편차 1인 정규분포에서 랜덤으로 뽑아 3X3 행렬생성
np.arange(x): 0부터 x-1까지의 순열생성
.sort(): 순서대로 정렬 옵션으로 reverse=True 하면 역순 정렬
reverse(): 현재의 List를 역순으로 뒤집어줌 (정렬하지 않고 그냥 역순으로 뒤집음)
index(): x라는 값이 있을 경우, x의 인덱스 반환
insert(x,y): x의 위치에 y라는 값을 삽입
remove(x) 함수는 첫 번째로 나오는 x 라는 값을 List에서 삭제해주는 함수
pop() 함수는 List의 가장 마지막 인덱스의 값을 반환해주고 그 값을 삭제해주는 함수
count(x) 함수는 x 라는 값이 List 안에 몇 개나 있는지 반환해주는 함수
del 함수를 사용 삭제가능
//: 나누기후 소수점 버린후 정수만 취함
clear(): 모두 삭제
T: 전치
isnull():누락된 데이터 출력
value_counts(): 각각의 범주가 몇개씩 있는지 확인
pd.describe():통계요약정보
tail(b): 데이터프레임의 끝 b줄만 보여줌
list.append(a):list에 추가
'a'+str(b)= 'ab'
X_new = (X < 경계값) : 경계값 조건에 맞는 X만 추출?하는건가
+= 왼쪽 항에 오른쪽 항을 더해서 왼쪽값 업데이트
ndarray.shape(): array의 차원
np.ones((2,3)):[[1,1,1],[1,1,1]]
range(a,b): a,b 범위사이의 정수 값 반환
normalizeRows(): 행별로 표준화해주는 함수
import matplotlib.pyplot as plt
####################################################################################################################################
if 조건:
수행할 명령문
else 조건:
수행할 명령문
####################################################################################################################################
numpy library
np.zeros(a,b):원소가 모두 0인 a,b차원 매트릭스 생성
str: 숫자를 문자열로 변환해줌
집합 자료형인 Set 입니다. 말 그대로 집합을 나타내기 위한 자료형입니다. 특징으로는 중복을 허용하지 않고, 순서가 없다는 것