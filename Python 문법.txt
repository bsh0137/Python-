Python은 첫 시작이 0
keras 나 tensorflow import 오류나면 아나콘다프롬프트 - conda install tensorflow 
//: 몫
%:나머지
싱글쿼터('), 더블쿼터(")을 문자열에 넣으려면 \을 앞에 추가해야한다
문자열 앞에 r로 감싸주면  raw라는 뜻으로 아무 의미 없는 문자열이라는 뜻
2:5 : 2,3,4 3:8 => 3,4,5,6,7
.append(): 리스트맨뒤에 값 추가
#####turtle 라이브러리 사용법)###
t.pensize(x): 펜 크기 x로 변경
t.color("색깔"):  특정색깔로 바꿈
t.setheading(x)/t.seth: 거북이가 x도 방향보게함 (0도가 오른쪽,90도가 위쪽)
t.home():거북이의 위치와 방향을 처음 상태로 돌림
t.onkeypress(함수,"키이름"):키보드를 눌렀을 때 실행할 함수를 정함
t.onscreenclick(함수): 마우스 버튼을 눌렀을 때 실행할 함수를 정함
t.ontimer(함수,시간):일정한 시간이 지난 뒤 실행할 함수를 정함
t.listen():사용자 입력이 잘 처리되도록 거북이 그래픽 창에 포커스를 줌
t.title("창 이름"): 거북이 그래픽 창의 이름을 지정
t.write("문자열"):현재 거북이 위치에 문자 출력
t.penup():꼬리를 듦( 움직여도 선이 안그려짐)
t.pendown(): 꼬리를 내림(이제 그릴 수 있음)
t.speed():속도조절
t.fillcolor("색이름"): 도형 내부 칠하는 색 바꿈
t.bgcolor("색 이름"): 화면 배경색 바꿈
t.hideturtle() or t.ht:거북이 화면에서 가림
t.showturtle(): 거북이 나타남
t.position()/t.pos : 거북이 현재 좌표
t.xcor()/t.ycor(): 거북이 X 혹은 Y 좌표만 구함 
t.goto(x,y)/t.setpos(x,y): 거북이를 특정좌표로 보냄
t.setx(x)/t.sety(y): 거북이의 x나 y좌표 하나만 지정한 위치로 이동
t.distance(x,y): 현재 거북이가 있는 위치에서 특정 위치까지의 거리를 구함
t.heading(): 거북이가 현재 바라보는 각도 구함
t.towards(): 현재 거북이가 있는 위치에서 특정 위치까지 바라보는 각도 구함
t.reset(): 화면지우고 거북이도 원래 자리와 상태로 되돌림
t.begin_fill():도형내부를 칠할 준비함
t.end_fill(): 도형 내부 색칠함
while True: 영원히 반복
t.setheading(10):거북이가 방향을 a각도 돌림
#############################
pd.read_csv("파일.csv"): csv 읽어오기
pd.read_csv("파일이름.csv",index_col = 0): csv 파일을 불러오고 첫번째 컬럼을 인덱스열로 봄
sqeueeze(): 크기가 1인 차원 없앰
len():길이 반환
turtle.forward(x): 거북이 라이브러리로 x 만큼 앞으로 이동
np.random.seed():씨드값 랜덤 실행같게 하기
pd.read_csv("데이터이름.csv") = csv 파일 읽기
array1.copy(): array1 복사 이경우 복사
cv2.resize(image, dsize, fx, fy, interpolation): 이미지 크기 조절, dsize: manual size, fx :가로비율 fy: 세로비율, interpolation:보간법(INTER_CUBIC: 이미지 크게할 때 보통사용, INTER_AREA 이미지 작게할 때 보통 사용)
cv2.mwrite(file_name,image): image파일을 file_name으로 저장
cv2.waitKey(time): 키보드 입력을 처리하는(받는) 함수
cv2.destroyAllWindows()
cv2.imread('file_name',cv2.IMREAD_COLOR): image 컬러로 읽기
cv2.imshow():이미지 화면에 보여주는 함수
cv2.waitKey(0):실행된 이미지를 사라지지 않게함
cv2.cvtColor(image,cv2.COLOR_BGR2GRAY): BGR 형태의 image를 gray형태로 바꾸는 함수 
np.linspace(0,10,5): 0~9를 5개로 나누어  생성
np.random.rand(3,4) : 3X4 난수생성
np.random.randint(0,10,(3,3)):0~9까지 수 랜덤으로 뽑아 3X3 행렬만들기
np.concatenate([array1,array2]): array1, array2 를 붙여 합쳐줌(가로축으로 ex: [1,2] +[3,4] = [1,2,3,4]
np.concatenate([array1,array2], axis=0): array1, array2를 세로축으로 붙여 합쳐줌
left, right = np.split(array, [2], axis=1) : array를 [2]열을 기준으로 나누어 left, right에 할당
array1.reshape((2,2)): array1을 2X2형태로 바꿈
np.random.normal(0,1,(3,3)) : 평균 0, 표준편차 1인 정규분포에서 랜덤으로 뽑아 3X3 행렬생성
np.arange(x): 0부터 x-1까지의 순열생성
.sort(): 순서대로 정렬 옵션으로 reverse=True 하면 역순 정렬
reverse(): 현재의 List를 역순으로 뒤집어줌 (정렬하지 않고 그냥 역순으로 뒤집음)
index(): x라는 값이 있을 경우, x의 인덱스 반환
insert(x,y): x의 위치에 y라는 값을 삽입
remove(x) 함수는 첫 번째로 나오는 x 라는 값을 List에서 삭제해주는 함수
pop() 함수는 List의 가장 마지막 인덱스의 값을 반환해주고 그 값을 삭제해주는 함수
count(x) 함수는 x 라는 값이 List 안에 몇 개나 있는지 반환해주는 함수
del 함수를 사용 삭제가능
//: 나누기후 소수점 버린후 정수만 취함
clear(): 모두 삭제
T: 전치
describe():통계요약정보
tail(b): 데이터프레임의 끝 b줄만 보여줌
list.append(a):list에 추가
'a'+str(b)= 'ab'
X_new = (X < 경계값) : 경계값 조건에 맞는 X만 추출?하는건가
+= 왼쪽 항에 오른쪽 항을 더해서 왼쪽값 업데이트
ndarray.shape(): array의 차원
np.ones((2,3)):[[1,1,1],[1,1,1]]
range(a,b): a,b 범위사이의 정수 값 반환
normalizeRows(): 행별로 표준화해주는 함수
####################################################################################################################################
if 조건:
수행할 명령문
else 조건:
수행할 명령문
####################################################################################################################################
numpy library
np.zeros(a,b):원소가 모두 0인 a,b차원 매트릭스 생성
str: 숫자를 문자열로 변환해줌
집합 자료형인 Set 입니다. 말 그대로 집합을 나타내기 위한 자료형입니다. 특징으로는 중복을 허용하지 않고, 순서가 없다는 것